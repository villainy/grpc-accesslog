# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tests.proto import test_service_pb2 as tests_dot_proto_dot_test__service__pb2


class TestServiceStub:
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UnaryUnary = channel.unary_unary(
            "/TestService/UnaryUnary",
            request_serializer=tests_dot_proto_dot_test__service__pb2.Request.SerializeToString,
            response_deserializer=tests_dot_proto_dot_test__service__pb2.Response.FromString,
        )
        self.UnaryStream = channel.unary_stream(
            "/TestService/UnaryStream",
            request_serializer=tests_dot_proto_dot_test__service__pb2.Request.SerializeToString,
            response_deserializer=tests_dot_proto_dot_test__service__pb2.Response.FromString,
        )
        self.StreamUnary = channel.stream_unary(
            "/TestService/StreamUnary",
            request_serializer=tests_dot_proto_dot_test__service__pb2.Request.SerializeToString,
            response_deserializer=tests_dot_proto_dot_test__service__pb2.Response.FromString,
        )
        self.StreamStream = channel.stream_stream(
            "/TestService/StreamStream",
            request_serializer=tests_dot_proto_dot_test__service__pb2.Request.SerializeToString,
            response_deserializer=tests_dot_proto_dot_test__service__pb2.Response.FromString,
        )


class TestServiceServicer:
    """Missing associated documentation comment in .proto file."""

    def UnaryUnary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UnaryStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StreamUnary(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StreamStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "UnaryUnary": grpc.unary_unary_rpc_method_handler(
            servicer.UnaryUnary,
            request_deserializer=tests_dot_proto_dot_test__service__pb2.Request.FromString,
            response_serializer=tests_dot_proto_dot_test__service__pb2.Response.SerializeToString,
        ),
        "UnaryStream": grpc.unary_stream_rpc_method_handler(
            servicer.UnaryStream,
            request_deserializer=tests_dot_proto_dot_test__service__pb2.Request.FromString,
            response_serializer=tests_dot_proto_dot_test__service__pb2.Response.SerializeToString,
        ),
        "StreamUnary": grpc.stream_unary_rpc_method_handler(
            servicer.StreamUnary,
            request_deserializer=tests_dot_proto_dot_test__service__pb2.Request.FromString,
            response_serializer=tests_dot_proto_dot_test__service__pb2.Response.SerializeToString,
        ),
        "StreamStream": grpc.stream_stream_rpc_method_handler(
            servicer.StreamStream,
            request_deserializer=tests_dot_proto_dot_test__service__pb2.Request.FromString,
            response_serializer=tests_dot_proto_dot_test__service__pb2.Response.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "TestService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class TestService:
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UnaryUnary(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/TestService/UnaryUnary",
            tests_dot_proto_dot_test__service__pb2.Request.SerializeToString,
            tests_dot_proto_dot_test__service__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UnaryStream(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/TestService/UnaryStream",
            tests_dot_proto_dot_test__service__pb2.Request.SerializeToString,
            tests_dot_proto_dot_test__service__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def StreamUnary(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/TestService/StreamUnary",
            tests_dot_proto_dot_test__service__pb2.Request.SerializeToString,
            tests_dot_proto_dot_test__service__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def StreamStream(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/TestService/StreamStream",
            tests_dot_proto_dot_test__service__pb2.Request.SerializeToString,
            tests_dot_proto_dot_test__service__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
